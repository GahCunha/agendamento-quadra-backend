generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  password             String
  role                 Role      @default(USER)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  bookings             Booking[]
  passwordResetToken   String?   // Campo opcional para o token de redefinição
  passwordResetExpires DateTime? // Campo opcional para a expiração do token
}

model Court {
  id           Int           @id @default(autoincrement())
  name         String
  location     String
  description  String?
  openTime     String
  closeTime    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  blockedTimes BlockedTime[]
  bookings     Booking[]
}

model Booking {
  id        Int           @id @default(autoincrement())
  userId    Int
  courtId   Int
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    BookingStatus @default(PENDING)
  reason     String?   
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  court     Court         @relation(fields: [courtId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@index([courtId], map: "Booking_courtId_fkey")
  @@index([userId], map: "Booking_userId_fkey")
}

model BlockedTime {
  id           Int       @id @default(autoincrement())
  courtId      Int
  date         DateTime?
  startTime    String?
  endTime      String?
  recurringDay Int?
  reason       String?
  createdAt    DateTime  @default(now())
  court        Court     @relation(fields: [courtId], references: [id])

  @@index([courtId], map: "BlockedTime_courtId_fkey")
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
